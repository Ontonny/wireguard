---
- name: Verify that required variables are defined
  assert:
    that:
      - "{{ item }} is defined"
      - "{{ item }} | length > 0"
      - "{{ item }} != None"
    fail_msg: "{{ item }} needs to be set for the role to work"
    success_msg: Required variable {{ item }} is defined
  loop:
    - peers
    - domain

- name: Verify that required variables are defined
  assert:
    that:
      - "{{ item }} is defined"
      - "{{ item }} != None"
      - "{{ item }} != ''"
    fail_msg: "{{ item }} needs to be set for the role to work"
    success_msg: "Required variable {{ item }} is defined"
  loop:
    - wg_port
    - wg_range_v4
    - wg_range_v6
    - wg_config_dir
    - wg_client_config_dir
    - wg_client_config_storage_host
    - generate_server_keys
    - generate_preshared_key

- name: install wireguard
  package:
    name: wireguard
    state: present
  become: true

- name: check wg is working
  command: which wg
  register: wg_command
  check_mode: false
  changed_when: false
  ignore_errors: true

- name: fail when wg command is not present
  fail:
    msg: The system does not have wireguard installed, cannot continue
  when: 'not wg_command.rc == 0'

- name: check if wg config file exists
  stat:
    path: "{{ wg_config_dir }}/wg0.conf"
  register: wg_config_file
  become: true
  when: not generate_preshared_key or not generate_server_keys

- name: When no config file is found, force key generation
  set_fact:
    generate_preshared_key: true
    generate_server_keys: true
  when: not wg_config_file.stat.exists

- name: get presharedkey from server
  command: grep -i PresharedKey {{ wg_config_dir }}/wg0.conf
  register: wg_preshared_key
  become: true
  check_mode: false
  changed_when: false
  no_log: true
  when: not generate_preshared_key

- name: set presharedkey as fact
  set_fact:
    wg_preshared_key: '{{ wg_preshared_key.stdout | regex_search("PresharedKey\s?=\s?([a-zA-Z0-9+/]*=)", "\1") | first }}'
  when: not generate_preshared_key

- name: generate presharedkey (serverside)
  command: wg genpsk
  register: new_wg_preshared_key
  check_mode: false
  when: generate_preshared_key

- name: set presharedkey as fact
  set_fact:
    wg_preshared_key: "{{ new_wg_preshared_key.stdout }}"
  no_log: true
  when: generate_preshared_key

- name: create requested serverside keys
  block:
    - name: create and change permission on temporary key directory (serverside)
      tempfile:
        state: directory
      become: true
      check_mode: false
      changed_when: false
      register: tempfile

    - name: create privatekey file (serverside)
      file:
        name: "{{ tempfile.path }}/private.key"
        state: touch
        mode: u=rw,g=,o=
      check_mode: false
      become: true

    - name: get privatekey from server
      command: grep -i PrivateKey {{ wg_config_dir }}/wg0.conf
      register: wg_server_private_key
      become: true
      check_mode: false
      changed_when: false
      no_log: true
      when: not generate_server_keys

    - name: set privatekey as fact
      set_fact:
        wg_server_private_key: '{{ wg_server_private_key.stdout | regex_search("PrivateKey\s?=\s?([a-zA-Z0-9+/]*=)", "\1") | first }}'
      no_log: true
      when: not generate_server_keys

    - name: write private key to temp file
      copy:
        content: "{{ wg_server_private_key }}"
        dest: "{{ tempfile.path }}/private.key"
        mode: u=rw,g=,o=
      become: true
      check_mode: false
      no_log: true
      when: not generate_server_keys

    - name: configuring public key command
      set_fact:
        create_server_pubkey: "{{ 'wg genkey | tee ' + tempfile.path + '/private.key | wg pubkey' if generate_server_keys else 'cat ' +  tempfile.path + '/private.key\
          \ | wg pubkey' }}"

    - name: generate private and public key (serverside)
      shell: set -o pipefail && {{ create_server_pubkey }}
      args:
        executable: /bin/bash
      register: wg_server_public_key
      become: true
      check_mode: false
      changed_when: wg_server_public_key.stdout != ""

    - name: fetch wireguard private key (serverside)
      command: "cat {{ tempfile.path }}/private.key"
      check_mode: false
      become: true
      register: wg_new_server_private_key
      no_log: true
      when: generate_server_keys

    - name: save public key
      set_fact:
        wg_server_public_key: "{{ wg_server_public_key.stdout }}"

    - name: set new private key as fact
      set_fact:
        wg_server_private_key: "{{ wg_new_server_private_key.stdout }}"
          # no_log: true
      when: generate_server_keys

  always:
    - name: remove temporary directory (serverside)
      file:
        name: "{{ tempfile.path }}"
        state: absent
      check_mode: false
      changed_when: false
      become: true

- name: Check that private, public key and presharedkey were set properly
  assert:
    that:
      - wg_server_private_key
      - wg_server_public_key
      - wg_preshared_key
    fail_msg: Keys are not properly defined!
    success_msg: Keys were found continuing!

- include_tasks: generate_client_keys.yaml
  loop: "{{ peers }}"
  loop_control:
    index_var: peer_id
    loop_var: peer

- name: update peers
  set_fact:
    peers: "{{ new_peers }}"

- name: move wireguard server config
  template:
    src: server.conf.j2
    dest: "{{ wg_config_dir }}/wg0.conf"
    mode: u=rw,g=,o=
  become: true

- name: create client wireguard config
  template:
    src: client.conf.j2
    dest: "{{ wg_client_config_dir }}/{{ inventory_hostname }}-{{ peer_id }}{% if peer.name %}-{{ peer.name }}{% endif %}.conf"
    mode: u=rw,g=rw,o=
  delegate_to: "{{ wg_client_config_storage_host }}"
  loop: "{{ peers }}"
  loop_control:
    index_var: peer_id
    loop_var: peer

- name: Enable wireguard service
  systemd:
    name: wg-quick@wg0
    enabled: true
    masked: false
  become: true

- name: reload wireguard
  systemd:
    state: reloaded
    daemon_reload: true
    name: wg-quick@wg0
  become: true

- name: reset connection
  meta: reset_connection

- name: check if wg is up
  command: wg
  become: true
  register: current_wg
  when: wg_show

- name: show wg
  debug:
    msg: "{{ current_wg.stdout }}"
  when: wg_show
